/*
 * Misskey API
 *
 * **Misskey is a decentralized microblogging platform.**   ## Usage **APIはすべてPOSTでリクエスト/レスポンスともにJSON形式です。** 一部のAPIはリクエストに認証情報(APIキー)が必要です。リクエストの際に`i`というパラメータでAPIキーを添付してください。  ### 自分のアカウントのAPIキーを取得する 「設定 > API」で、自分のAPIキーを取得できます。  > アカウントを不正利用される可能性があるため、このトークンは第三者に教えないでください(アプリなどにも入力しないでください)。  ### アプリケーションとしてAPIキーを取得する 直接ユーザーのAPIキーをアプリケーションが扱うのはセキュリティ上のリスクがあるので、 アプリケーションからAPIを利用する際には、アプリケーションとアプリケーションを利用するユーザーが結び付けられた専用のAPIキーを発行します。  #### 1.アプリケーションを登録する まず、あなたのアプリケーションやWebサービス(以後、あなたのアプリと呼びます)をMisskeyに登録します。 [デベロッパーセンター](/dev)にアクセスし、「アプリ > アプリ作成」からアプリを作成してください。  登録が済むとあなたのアプリのシークレットキーが入手できます。このシークレットキーは後で使用します。  > アプリに成りすまされる可能性があるため、極力このシークレットキーは公開しないようにしてください。</p>  #### 2.ユーザーに認証させる アプリを使ってもらうには、ユーザーにアカウントへのアクセスの許可をもらう必要があります。  認証セッションを開始するには、[https://misskey.kurume-nct.com/api/auth/session/generate](#operation/auth/session/generate) へパラメータに`appSecret`としてシークレットキーを含めたリクエストを送信します。 レスポンスとして認証セッションのトークンや認証フォームのURLが取得できるので、認証フォームのURLをブラウザで表示し、ユーザーにフォームを提示してください。  あなたのアプリがコールバックURLを設定している場合、 ユーザーがあなたのアプリの連携を許可すると設定しているコールバックURLに`token`という名前でセッションのトークンが含まれたクエリを付けてリダイレクトします。  あなたのアプリがコールバックURLを設定していない場合、ユーザーがあなたのアプリの連携を許可したことを(何らかの方法で(たとえばボタンを押させるなど))確認出来るようにしてください。  #### 3.アクセストークンを取得する ユーザーが連携を許可したら、[https://misskey.kurume-nct.com/api/auth/session/userkey](#operation/auth/session/userkey) へリクエストを送信します。  上手くいけば、認証したユーザーのアクセストークンがレスポンスとして取得できます。おめでとうございます！  アクセストークンが取得できたら、*「ユーザーのアクセストークン+あなたのアプリのシークレットキーをsha256したもの」*をAPIキーとして、APIにリクエストできます。  APIキーの生成方法を擬似コードで表すと次のようになります: ``` js const i = sha256(userToken + secretKey); ``` 
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi
// InlineObject118 struct for InlineObject118
type InlineObject118 struct {
	// 最大数
	Limit float32 `json:"limit,omitempty"`
	// 指定すると、この投稿を基点としてより新しい投稿を取得します
	SinceId string `json:"sinceId,omitempty"`
	// 指定すると、この投稿を基点としてより古い投稿を取得します
	UntilId string `json:"untilId,omitempty"`
	// 指定した時間を基点としてより新しい投稿を取得します。数値は、1970年1月1日 00:00:00 UTC から指定した日時までの経過時間をミリ秒単位で表します。
	SinceDate float32 `json:"sinceDate,omitempty"`
	// 指定した時間を基点としてより古い投稿を取得します。数値は、1970年1月1日 00:00:00 UTC から指定した日時までの経過時間をミリ秒単位で表します。
	UntilDate float32 `json:"untilDate,omitempty"`
	// 自分の行ったRenoteを含めるかどうか
	IncludeMyRenotes bool `json:"includeMyRenotes,omitempty"`
	// Renoteされた自分の投稿を含めるかどうか
	IncludeRenotedMyNotes bool `json:"includeRenotedMyNotes,omitempty"`
	// Renoteされたローカルの投稿を含めるかどうか
	IncludeLocalRenotes bool `json:"includeLocalRenotes,omitempty"`
	// true にすると、ファイルが添付された投稿だけ取得します
	WithFiles bool `json:"withFiles,omitempty"`
	// true にすると、ファイルが添付された投稿だけ取得します (このパラメータは廃止予定です。代わりに withFiles を使ってください。)
	MediaOnly bool `json:"mediaOnly,omitempty"`
}
