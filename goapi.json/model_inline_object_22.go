/*
 * Misskey API
 *
 * **Misskey is a decentralized microblogging platform.**   ## Usage **APIはすべてPOSTでリクエスト/レスポンスともにJSON形式です。** 一部のAPIはリクエストに認証情報(APIキー)が必要です。リクエストの際に`i`というパラメータでAPIキーを添付してください。  ### 自分のアカウントのAPIキーを取得する 「設定 > API」で、自分のAPIキーを取得できます。  > アカウントを不正利用される可能性があるため、このトークンは第三者に教えないでください(アプリなどにも入力しないでください)。  ### アプリケーションとしてAPIキーを取得する 直接ユーザーのAPIキーをアプリケーションが扱うのはセキュリティ上のリスクがあるので、 アプリケーションからAPIを利用する際には、アプリケーションとアプリケーションを利用するユーザーが結び付けられた専用のAPIキーを発行します。  #### 1.アプリケーションを登録する まず、あなたのアプリケーションやWebサービス(以後、あなたのアプリと呼びます)をMisskeyに登録します。 [デベロッパーセンター](/dev)にアクセスし、「アプリ > アプリ作成」からアプリを作成してください。  登録が済むとあなたのアプリのシークレットキーが入手できます。このシークレットキーは後で使用します。  > アプリに成りすまされる可能性があるため、極力このシークレットキーは公開しないようにしてください。</p>  #### 2.ユーザーに認証させる アプリを使ってもらうには、ユーザーにアカウントへのアクセスの許可をもらう必要があります。  認証セッションを開始するには、[https://misskey.kurume-nct.com/api/auth/session/generate](#operation/auth/session/generate) へパラメータに`appSecret`としてシークレットキーを含めたリクエストを送信します。 レスポンスとして認証セッションのトークンや認証フォームのURLが取得できるので、認証フォームのURLをブラウザで表示し、ユーザーにフォームを提示してください。  あなたのアプリがコールバックURLを設定している場合、 ユーザーがあなたのアプリの連携を許可すると設定しているコールバックURLに`token`という名前でセッションのトークンが含まれたクエリを付けてリダイレクトします。  あなたのアプリがコールバックURLを設定していない場合、ユーザーがあなたのアプリの連携を許可したことを(何らかの方法で(たとえばボタンを押させるなど))確認出来るようにしてください。  #### 3.アクセストークンを取得する ユーザーが連携を許可したら、[https://misskey.kurume-nct.com/api/auth/session/userkey](#operation/auth/session/userkey) へリクエストを送信します。  上手くいけば、認証したユーザーのアクセストークンがレスポンスとして取得できます。おめでとうございます！  アクセストークンが取得できたら、*「ユーザーのアクセストークン+あなたのアプリのシークレットキーをsha256したもの」*をAPIキーとして、APIにリクエストできます。  APIキーの生成方法を擬似コードで表すと次のようになります: ``` js const i = sha256(userToken + secretKey); ``` 
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi
// InlineObject22 struct for InlineObject22
type InlineObject22 struct {
	// お知らせ
	Announcements *[]map[string]interface{} `json:"announcements,omitempty"`
	// 招待制か否か
	DisableRegistration *bool `json:"disableRegistration,omitempty"`
	// ローカルタイムライン(とソーシャルタイムライン)を無効にするか否か
	DisableLocalTimeline *bool `json:"disableLocalTimeline,omitempty"`
	// グローバルタイムラインを無効にするか否か
	DisableGlobalTimeline *bool `json:"disableGlobalTimeline,omitempty"`
	// 公開範囲がローカルのみの投稿をActivityPub経由以外からも保護するか否か
	ProtectLocalOnlyNotes *bool `json:"protectLocalOnlyNotes,omitempty"`
	// 絵文字リアクションを有効にするか否か
	EnableEmojiReaction *bool `json:"enableEmojiReaction,omitempty"`
	// 不明なリアクションのフォールバックに star リアクションを使うか
	UseStarForReactionFallback *bool `json:"useStarForReactionFallback,omitempty"`
	// 統計などで無視するハッシュタグ
	HidedTags *[]string `json:"hidedTags,omitempty"`
	// インスタンスキャラクター画像のURL
	MascotImageUrl *string `json:"mascotImageUrl,omitempty"`
	// インスタンスのバナー画像URL
	BannerUrl *string `json:"bannerUrl,omitempty"`
	// インスタンスのエラー画像URL
	ErrorImageUrl *string `json:"errorImageUrl,omitempty"`
	// インスタンスのアイコンURL
	IconUrl *string `json:"iconUrl,omitempty"`
	// インスタンス名
	Name *string `json:"name,omitempty"`
	// インスタンスの紹介文
	Description *string `json:"description,omitempty"`
	// 投稿の最大文字数
	MaxNoteTextLength float32 `json:"maxNoteTextLength,omitempty"`
	// ローカルユーザーひとりあたりのドライブ容量 (メガバイト単位)
	LocalDriveCapacityMb float32 `json:"localDriveCapacityMb,omitempty"`
	// リモートユーザーひとりあたりのドライブ容量 (メガバイト単位)
	RemoteDriveCapacityMb float32 `json:"remoteDriveCapacityMb,omitempty"`
	// リモートのファイルをキャッシュするか否か
	CacheRemoteFiles bool `json:"cacheRemoteFiles,omitempty"`
	// reCAPTCHAを使用するか否か
	EnableRecaptcha bool `json:"enableRecaptcha,omitempty"`
	// reCAPTCHA site key
	RecaptchaSiteKey *string `json:"recaptchaSiteKey,omitempty"`
	// reCAPTCHA secret key
	RecaptchaSecretKey *string `json:"recaptchaSecretKey,omitempty"`
	// プロキシアカウントのユーザー名
	ProxyAccount *string `json:"proxyAccount,omitempty"`
	// インスタンスの管理者名
	MaintainerName string `json:"maintainerName,omitempty"`
	// インスタンス管理者の連絡先メールアドレス
	MaintainerEmail *string `json:"maintainerEmail,omitempty"`
	// インスタンスの対象言語
	Langs []string `json:"langs,omitempty"`
	// summalyプロキシURL
	SummalyProxy *string `json:"summalyProxy,omitempty"`
	// Twitter連携機能を有効にするか否か
	EnableTwitterIntegration bool `json:"enableTwitterIntegration,omitempty"`
	// TwitterアプリのConsumer key
	TwitterConsumerKey *string `json:"twitterConsumerKey,omitempty"`
	// TwitterアプリのConsumer secret
	TwitterConsumerSecret *string `json:"twitterConsumerSecret,omitempty"`
	// GitHub連携機能を有効にするか否か
	EnableGithubIntegration bool `json:"enableGithubIntegration,omitempty"`
	// GitHubアプリのClient ID
	GithubClientId *string `json:"githubClientId,omitempty"`
	// GitHubアプリのClient Secret
	GithubClientSecret *string `json:"githubClientSecret,omitempty"`
	// Discord連携機能を有効にするか否か
	EnableDiscordIntegration bool `json:"enableDiscordIntegration,omitempty"`
	// DiscordアプリのClient ID
	DiscordClientId *string `json:"discordClientId,omitempty"`
	// DiscordアプリのClient Secret
	DiscordClientSecret *string `json:"discordClientSecret,omitempty"`
	// 外部ユーザーレコメンデーションを有効にする
	EnableExternalUserRecommendation bool `json:"enableExternalUserRecommendation,omitempty"`
	// 外部ユーザーレコメンデーションのサードパーティエンジン
	ExternalUserRecommendationEngine *string `json:"externalUserRecommendationEngine,omitempty"`
	// 外部ユーザーレコメンデーションのタイムアウト (ミリ秒)
	ExternalUserRecommendationTimeout *float32 `json:"externalUserRecommendationTimeout,omitempty"`
	// メール配信を有効にするか否か
	EnableEmail bool `json:"enableEmail,omitempty"`
	// メール配信する際に利用するメールアドレス
	Email *string `json:"email,omitempty"`
	// SMTPサーバがSSLを使用しているか否か
	SmtpSecure bool `json:"smtpSecure,omitempty"`
	// SMTPサーバのホスト
	SmtpHost *string `json:"smtpHost,omitempty"`
	// SMTPサーバのポート
	SmtpPort *float32 `json:"smtpPort,omitempty"`
	// SMTPサーバのユーザー名
	SmtpUser *string `json:"smtpUser,omitempty"`
	// SMTPサーバのパスワード
	SmtpPass *string `json:"smtpPass,omitempty"`
	// ServiceWorkerを有効にするか否か
	EnableServiceWorker bool `json:"enableServiceWorker,omitempty"`
	// ServiceWorkerのVAPIDキーペアの公開鍵
	SwPublicKey *string `json:"swPublicKey,omitempty"`
	// ServiceWorkerのVAPIDキーペアの秘密鍵
	SwPrivateKey *string `json:"swPrivateKey,omitempty"`
}
